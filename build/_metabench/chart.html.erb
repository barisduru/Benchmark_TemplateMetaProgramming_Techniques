<!DOCTYPE html>                                                                                                            
<html>                                                                                                                     
  <head>                                                                                                                   
    <meta charset='utf-8'>                                                                                                 
    <style><%= IO.read('/home/traderbd/Desktop/C++_Projects/github/Benchmark_TemplateMetaProgramming_Techniques/build/_metabench/nvd3.css') %></style>                                                             
    <style>                                                                                                                
      * {                                                                                                                  
        box-sizing: border-box;                                                                                            
      }                                                                                                                    
      html, body {                                                                                                         
        position: relative;                                                                                                
        height: 100%;                                                                                                      
        width: 100%;                                                                                                       
        border: 0;                                                                                                         
        margin: 0;                                                                                                         
        padding: 0;                                                                                                        
        font-size: 0;                                                                                                      
      }                                                                                                                    
      svg g {                                                                                                              
        clip-path: none;                                                                                                   
      }                                                                                                                    
      svg text {                                                                                                           
        fill: #333;                                                                                                        
      }                                                                                                                    
      .nv-axislabel {                                                                                                      
        font-size: 16px !important;                                                                                        
      }                                                                                                                    
      .control {                                                                                                           
        cursor: pointer;                                                                                                   
        visibility: hidden;                                                                                                
        pointer-events: visible;                                                                                           
      }                                                                                                                    
      @media (min-width: 768px) {                                                                                          
        .control {                                                                                                         
          visibility: visible;                                                                                             
        }                                                                                                                  
      }                                                                                                                    
    </style>                                                                                                               
    <script><%= IO.read('/home/traderbd/Desktop/C++_Projects/github/Benchmark_TemplateMetaProgramming_Techniques/build/_metabench/d3.js') %></script>                                                              
    <script><%= IO.read('/home/traderbd/Desktop/C++_Projects/github/Benchmark_TemplateMetaProgramming_Techniques/build/_metabench/nvd3.js') %></script>                                                            
  </head>                                                                                                                  
  <body>                                                                                                                   
    <svg id='chart'></svg>                                                                                                 
    <script type='text/javascript'>                                                                                        
      // Simple helper to compute the median of a sequence of values                                                       
      var median = function(values) {                                                                                      
        values.sort(function(a, b) { return a - b; });                                                                     
        var half = Math.floor(values.length / 2);                                                                          
        if (values.length % 2)                                                                                             
          return values[half];                                                                                             
        else                                                                                                               
          return (values[half - 1] + values[half]) / 2.0;                                                                  
      };                                                                                                                   
                                                                                                                           
      var customSettings = <%= options.to_json %>;                                                                         
      var aspect = '<%= aspect %>';                                                                                        
      // 'data' is an array of datasets (i.e. curves), each of which is an object of the form                              
      // {                                                                                                                 
      //   key: <name of the curve>,                                                                                       
      //   color: <COLOR argument for that dataset (optional, may be the empty string)>,                                   
      //   scale: <SCALE argument for that dataset>,                                                                       
      //   values: [{                                                                                                      
      //       n: <value of n for that run>,                                                                               
      //       base: [{ // an array of samples for the same 'n'                                                            
      //           COMPILATION_TIME: <compilation time in seconds>,                                                        
      //           LINK_TIME:        <link time in seconds>,                                                               
      //           EXECUTABLE_SIZE:  <executable size in KB>,                                                              
      //           PEAK_MEMORY:      <peak memory usage in KB>                                                             
      //       }],                                                                                                         
      //       total: <same as 'base', but with METABENCH defined>                                                         
      //   }]                                                                                                              
      // }                                                                                                                 
      var data = <%= data.to_json %>;                                                                                      
                                                                                                                           
      // massage the measurements for ingestion by nvd3                                                                    
      data.forEach(function(dataset) {                                                                                     
        dataset.values = dataset.values.map(function(value) {                                                              
          new_value = {'n': value['n'], 'base': {}, 'total': {}};                                                          
          ['COMPILATION_TIME', 'LINK_TIME', 'EXECUTABLE_SIZE', 'PEAK_MEMORY'].forEach(function(aspect) {                   
            new_value['base'][aspect] = value.base.map(function(v){ return dataset.scale * v[aspect]; });                  
            new_value['total'][aspect] = value.total.map(function(v){ return dataset.scale * v[aspect]; });                
          });                                                                                                              
          return new_value;                                                                                                
        });                                                                                                                
      });                                                                                                                  
                                                                                                                           
      // setup per-aspect custom settings                                                                                  
      var aspectDefaults = {                                                                                               
        'COMPILATION_TIME': {                                                                                              
          axisLabel: 'Compilation time',                                                                                   
          tickFormat: function(val){ return d3.format('.2f')(val) + 's'; }                                                 
        },                                                                                                                 
        'EXECUTABLE_SIZE': {                                                                                               
          axisLabel: 'Executable size',                                                                                    
          tickFormat: function(val){ return d3.format('.0f')(val) + 'kb'; }                                                
        },                                                                                                                 
        'LINK_TIME': {                                                                                                     
          axisLabel: 'Link time',                                                                                          
          tickFormat: function(val){ return d3.format('.2f')(val) + 's'; }                                                 
        },                                                                                                                 
        'PEAK_MEMORY': {                                                                                                   
          axisLabel: 'Peak memory usage',                                                                                  
          tickFormat: function(val){ return d3.format('.0f')(val) + 'kb'; }                                                
        }                                                                                                                  
      };                                                                                                                   
                                                                                                                           
      // setup the chart and its options                                                                                   
      var chart = nv.models.lineChart()                                                                                    
                    .color(d3.scale.category10().range())                                                                  
                    .margin({left: 75, bottom: 50})                                                                        
                    .forceX([0]).forceY([0]);                                                                              
                                                                                                                           
      chart.x(function(datum){ return datum.n; })                                                                          
           .xAxis.options({                                                                                                
             axisLabel: customSettings.XLABEL || 'Number of elements',                                                     
             tickFormat: d3.format('.0f')                                                                                  
           });                                                                                                             
                                                                                                                           
      var subtract_baseline = function(datum) {                                                                            
        return Math.max(0, median(datum.total[aspect]) - median(datum.base[aspect]));                                      
      };                                                                                                                   
      chart.y(subtract_baseline)                                                                                           
           .yAxis.options({                                                                                                
             axisLabel: customSettings.YLABEL || aspectDefaults[aspect].axisLabel,                                         
             tickFormat: aspectDefaults[aspect].tickFormat                                                                 
           });                                                                                                             
                                                                                                                           
      chart.interpolate('cardinal').useInteractiveGuideline(true);                                                         
      d3.select('#chart').datum(data).call(chart);                                                                         
      var plot = d3.select('#chart > g');                                                                                  
                                                                                                                           
      // setup the title                                                                                                   
      plot.append('text')                                                                                                  
          .style('font-size', '24px')                                                                                      
          .attr('text-anchor', 'middle').attr('x', '50%').attr('y', '20px')                                                
          .text(customSettings.TITLE || '');                                                                               
                                                                                                                           
      // setup the subtitle                                                                                                
      plot.append('text')                                                                                                  
          .style('font-size', '16px')                                                                                      
          .attr('text-anchor', 'middle').attr('x', '50%').attr('y', '40px')                                                
          .text(customSettings.SUBTITLE || '');                                                                            
                                                                                                                           
      // setup interpolation control                                                                                       
      var controls = plot.select('.nv-x.nv-axis').append('g').attr('transform', 'translate(24,30)');                       
      var interpolate = controls.append('g').attr('class', 'control interpolate').datum([chart.interpolate()]);            
      interpolate.append('circle')                                                                                         
                 .style('fill', '#333').style('stroke', '#333').style('stroke-width', '2').style('fill-opacity', 1)        
                 .attr('cx', 0).attr('cy', 0).attr('r', 5);                                                                
      interpolate.append('text').attr('text-anchor', 'start').attr('dx', '8').attr('dy', '.32em').text('interpolate');     
      interpolate.on('click', function() {                                                                                 
        if (chart.interpolate() === interpolate.datum()[0]) {                                                              
          interpolate.select('circle').style('fill-opacity', 0);                                                           
          chart.interpolate('linear');                                                                                     
        } else {                                                                                                           
          d3.select(this).select('circle').style('fill-opacity', 1);                                                       
          chart.interpolate(interpolate.datum()[0]);                                                                       
        }                                                                                                                  
        chart.update();                                                                                                    
      });                                                                                                                  
                                                                                                                           
      // setup baseline control                                                                                            
      var baseline = controls.append('g').attr('class', 'control baseline').datum(true /* whether button is checked */);   
      baseline.attr('transform', 'translate(80,0)').append('circle')                                                       
              .style('fill', '#333').style('stroke', '#333').style('stroke-width', '2').style('fill-opacity', 1)           
              .attr('cx', 0).attr('cy', 0).attr('r', 5);                                                                   
      baseline.append('text').attr('text-anchor', 'start').attr('dx', '8').attr('dy', '.32em').text('subtract baseline');  
      baseline.on('click', function() {                                                                                    
        // We subtract the baseline from the total if the button was just checked, otherwise we use the total unchanged.   
        if (!baseline.datum()) {                                                                                           
          d3.select(this).select('circle').style('fill-opacity', 1);                                                       
          chart.y(subtract_baseline);                                                                                      
        } else {                                                                                                           
          baseline.select('circle').style('fill-opacity', 0);                                                              
          chart.y(function(datum) { return median(datum.total[aspect]); });                                                
        }                                                                                                                  
        baseline.datum(!baseline.datum()); // toggle the radio button                                                      
        chart.update();                                                                                                    
      });                                                                                                                  
                                                                                                                           
      // ensure the chart is responsive                                                                                    
      nv.utils.windowResize(chart.update);                                                                                 
    </script>                                                                                                              
  </body>                                                                                                                  
</html>                                                                                                                    
